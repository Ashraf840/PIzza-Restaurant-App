# API View
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
import json
from home.models import *
from home.decorators import *


# API View/ Method (used in the 'indx.html' file's onclick func ('createOrder'))
# Axios.Post method is used to call this backend api. It's called inside the "templates/home/index.html" file's JS-script ("static/js/index_api.js").
@csrf_exempt
@stop_restaurant_staff
def order_pizza(request):
    # return JsonResponse({ 'testing': 'Success' }) # testing API

    try:
        # print(request.user)
        # print(json.loads(request.body))

        # fetching data send from the frontend func ("createOrder")
        user = request.user # fetch user info from 'index.html'
        data = json.loads(request.body) # fetch all the django-vars from 'index.html', especially focuses on 'pizza' information. Converts a JSON-obj to a python-dictionary.
        
        pizza = Pizza.objects.get(id=data.get('id'))    # extract the specific pizza-obj from db using the 'pizza.id' onclick 'createOrder({{p.id}})' func existed in 'index.html'
        
        # [ INSERT RECORD TO DB ]
        # Creating an single-record in the 'Order' model-class
        order = Order(user=user, pizza=pizza, amount=pizza.price)
        order.save()

        return JsonResponse({ 'status': True, 'message': 'Success', 'order': 'A new order is created' })
    except:
        return JsonResponse({ 'status': False, 'error': 'Something went wrong' })


""" NB:
While creating an order-record in the 'Order' model-class:
    The 'order_id' field gets generated by random-string by overriding the 'save' method.
    The 'status' field has a default-string-value to be set while creating a new order. 
    The 'date' field will automatically populate the current-date while creating a new order. 

So, we need to collect 
    the username, 
    the pizza-id (as foreign-key in the 'Order' class),
    the amount of the pizza.

Then pass those data in the signle-record-query in the 'Order' table.
"""